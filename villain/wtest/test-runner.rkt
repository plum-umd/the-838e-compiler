#lang racket
(provide test-runner test-runner-io)
(require rackunit)

(define (test-runner run)
  ;; Abscond examples
  (check-equal? (run 7) 7)
  (check-equal? (run -8) -8)

  ;; Blackmail examples
  (check-equal? (run '(add1 (add1 7))) 9)
  (check-equal? (run '(add1 (sub1 7))) 7)
  
  ;; Con examples
  (check-equal? (run '(if (zero? 0) 1 2)) 1)
  (check-equal? (run '(if (zero? 1) 1 2)) 2)
  (check-equal? (run '(if (zero? -7) 1 2)) 2)
  (check-equal? (run '(if (zero? 0)
                          (if (zero? 1) 1 2)
                          7))
                2)
  (check-equal? (run '(if (zero? (if (zero? 0) 1 0))
                          (if (zero? 1) 1 2)
                          7))
                7)

  ;; Dupe examples
  (check-equal? (run #t) #t)
  (check-equal? (run #f) #f)
  (check-equal? (run (if #t 1 2)) 1)
  (check-equal? (run (if #f 1 2)) 2)
  (check-equal? (run (if 0 1 2)) 1)
  (check-equal? (run '(if #t 3 4)) 3)
  (check-equal? (run '(if #f 3 4)) 4)
  (check-equal? (run '(if  0 3 4)) 3)
  (check-equal? (run '(zero? 4)) #f)
  (check-equal? (run '(zero? 0)) #t)
  (check-equal? (run '(integer? 4)) #t)
  (check-equal? (run '(integer? #t)) #f)
  ;; Dodger examples
  (check-equal? (run #\a) #\a)
  (check-equal? (run #\b) #\b)
  (check-equal? (run '(char? #\a)) #t)
  (check-equal? (run '(char? #t)) #f)
  (check-equal? (run '(char? 8)) #f)
  (check-equal? (run '(char->integer #\a)) (char->integer #\a))
  (check-equal? (run '(integer->char 955)) #\Î»)
  (check-equal? (run '(integer->char 0)) #\nul)
  (check-equal? (run '(integer->char 1)) #\u0001)                
  (check-equal? (run '(integer->char 1114111)) #\U0010FFFF)
  (check-equal? (run '(integer->char 55295)) #\uD7FF)
  (check-equal? (run '(integer->char 57344)) #\uE000)
  ;; Extort examples
  (check-equal? (run '(add1 #f)) 'err)
  (check-equal? (run '(sub1 #f)) 'err)
  (check-equal? (run '(zero? #f)) 'err)
  (check-equal? (run '(char->integer #f)) 'err)
  (check-equal? (run '(integer->char #f)) 'err)
  (check-equal? (run '(integer->char -1)) 'err)
  (check-equal? (run '(integer->char 1114112)) 'err)
  (check-equal? (run '(integer->char 55296)) 'err)
  (check-equal? (run '(integer->char 57343)) 'err)
  (check-equal? (run '(write-byte #f)) 'err)
  (check-equal? (run '(write-byte -1)) 'err)
  (check-equal? (run '(write-byte 256)) 'err)
  (check-equal? (run '(integer-length 229)) 8)
  (check-equal? (run '(integer-length -1657)) 11)
  (check-equal? (run '(integer-length #t)) 'err)
  ;; Fraud examples
  (check-equal? (run '(let ((x 7)) x)) 7)
  (check-equal? (run '(let ((x 7)) 2)) 2)
  (check-equal? (run '(let ((x 7)) (add1 x))) 8)
  (check-equal? (run '(let ((x (add1 7))) x)) 8)
  (check-equal? (run '(let ((x 7)) (let ((y 2)) x))) 7)
  (check-equal? (run '(let ((x 7)) (let ((x 2)) x))) 2)
  (check-equal? (run '(let ((x 7)) (let ((x (add1 x))) x))) 8)

  (check-equal? (run '(let ((x 0))
                        (if (zero? x) 7 8)))
                7)
  (check-equal? (run '(let ((x 1))
                        (add1 (if (zero? x) 7 8))))
                9)
  (check-equal? (run '(+ 3 4)) 7)
  (check-equal? (run '(- 3 4)) -1)
  (check-equal? (run '(+ (+ 2 1) 4)) 7)
  (check-equal? (run '(+ (+ 2 1) (+ 2 2))) 7)
  (check-equal? (run '(let ((x (+ 1 2)))
                        (let ((z (- 4 x)))
                          (+ (+ x x) z))))
                7)
  (check-equal? (run '(let ((x 5))
                        (let ((y 9))
                          (+ (+ (- (+ (+ x 4) (+ y 5)) 5) (+ x x)) (+ y y)))))
                46)
  (check-equal? (run '(let ((x (add1 #f))) 0)) 'err)

  ;; n-ary let
  (check-equal? (run '(let () 4)) 4)
  (check-equal? (run '(let ((x 4)) 3)) 3)
  (check-equal? (run '(let ((x 4)) x)) 4)
  (check-equal? (run '(let ((x 4) (y 6)) (+ x y))) 10)
  (check-equal? (run '(let ((x (let ((y 4)) y)) (y 6)) (+ x y))) 10)
  (check-equal? (run '(let ((y 6) (x (let ((y 4)) y))) (+ x y))) 10)
  (check-equal? (run '(let ((y (let ((y 4)) y)) (x (let ((z 4)) z)) (z 2)) (+ z (+ x y)))) 10)
  (check-equal? (run '(let ((x (add1 12)) (y 9)) (let ((x (add1 x)) (z y)) (+ z x)))) 23)
  
  ;; Hustle examples
  (check-equal? (run ''()) '())
  (check-equal? (run '(empty? '())) #t)
  (check-equal? (run '(empty? (cons 1 '()))) #f)
  (check-equal? (run '(box 1)) (box 1))
  (check-equal? (run '(box (box (box (let ((x 1)) x))))) '#&#&#&1) 
  (check-equal? (run '(cons 1 2)) (cons 1 2))
  (check-equal? (run '(unbox (box 1))) 1)
  (check-equal? (run '(unbox (box (box 1)))) (box 1))
  (check-equal? (run '(unbox (unbox (box (box 1))))) 1)
  (check-equal? (run '(unbox 226)) 'err)
  (check-equal? (run '(car (cons 1 2))) 1)
  (check-equal? (run '(cdr (cons 1 2))) 2)
  (check-equal? (run '(cons 1 '())) (list 1))
  (check-equal? (run '(let ((x (cons 1 2)))
                        (begin (cdr x)
                               (car x))))
                1)
  (check-equal? (run '(let ((x (cons 1 2)))
                        (let ((y (box 3)))
                          (unbox y))))
                3)
  (check-equal? (run '(let ((x (box 1))) (eq? x x))) #t)                
  (check-equal? (run '(eq? (box 1) (box 1))) #f)
  (check-equal? (run '(cons 1 (cons 2 (cons 3 '())))) (list 1 2 3))
  (check-equal? (run '(cons 1 (cons 2  3))) (cons 1 (cons 2 3)))
  (check-equal? (run '(cdr (car (cdr
                        (cons '() (cons (cons 1 (cons '() (cons 2 '())))
                              (cons "asdf" (cons 1 (cons #t '())))))))))
                (list '() 2))
  (check-equal? (run '(cons '() (cons (cons 1 (cons 2 (cons 3 '())))
                                      (cons (add1 5) (cons 1 '())))))
                '(() (1 2 3) 6 1))
  (check-equal? (run '(cons 1 (cons (sub1 0) (cons -226 '()))))
                (list 1 -1 -226))

  (check-equal? (run
    '(let ((str (make-string (if (string? "") (add1 6) 1) #\a)))
       (let ((x (car (cdr (cons 8 (cons 10 '()))))))
         (if (string?         
              (let ((y (cons 5 (cons 3 '()))))
                (let ((z (let ((k #\a)) k)))
                  (let ((w 10))
                    (make-string (- x 5) (string-ref str (car (cdr y))))))))    
             (make-string (- (string-length "abcdefghij") (string-length str))
                          (integer->char (+ (string-length (make-string x #\a))
                                            (char->integer (string-ref "true" 3)))))
             "false"))))
   "ooo")

  (check-equal? (run
    '(let ((X (cons 19 (cons 18 (cons (box 4) (cons 17 '())))))
           (x (box 6))
           (u 2)
           (t 1)
           (Y (let ((u 1)
                    (t 2)
                    (q 7)
                    (w (unbox (box (unbox (box (unbox
                                                (box (make-string (unbox (box 5)) #\o))))))))
                    (z 5))
                (let ((o 5)
                      (p (string-ref w t))
                      (i 4)
                      (t (string-length w))
                      (r 8))
                  (unbox (box (cons u (cons (box (unbox (box q)))
                     (cons w (cons z (cons o (cons p (cons i (cons (box t) r))))))))))))))
       Y))
                '(1 #&7 "ooooo" 5 5 #\o 4 #&5 . 8))

  ;; String examples 
  (check-equal? (run "Racket") "Racket")
  (check-equal? (run "Rack") "Rack")
  (check-equal? (run "Ra") "Ra")
  (check-equal? (run "R") "R")
  (check-equal? (run "") "")
  (check-equal? (run '(string-length "Rack")) 4)
  (check-equal? (run '(string-length "")) 0)
  (check-equal? (run '(string-ref "Racket" 0)) #\R)
  (check-equal? (run '(string-ref "Racket" 5)) #\t)
  (check-equal? (run '(string-ref "Racket" 3)) #\k)
  (check-equal? (run '(string-ref "Racket" 6)) 'err)
  (check-equal? (run '(string-ref "Racket" -1)) 'err)
  (check-equal? (run '(string? "Racket")) #t)
  (check-equal? (run '(string? "")) #t)
  (check-equal? (run '(string? 5)) #f)
  (check-equal? (run '(string? #\a)) #f)
  (check-equal? (run '(string? '())) #f)
  (check-equal? (run '(string? #t)) #f)
  (check-equal? (run '(make-string 5 #\y)) "yyyyy")
  (check-equal? (run '(make-string 3 #\y)) "yyy")
  (check-equal? (run '(make-string 1 #\y)) "y")
  (check-equal? (run '(make-string 0 #\y)) "")
  (check-equal? (run '(make-string -1 #\y)) 'err)
  
  ;; Iniquity tests
  (check-equal? (run
                 '(begin (define (f x) x)
                         (f 5)))
                5)
  (check-equal? (run
                 '(begin (define (tri x)
                           (if (zero? x)
                               0
                               (+ x (tri (sub1 x)))))
                         (tri 9)))
                45)
  (check-equal? (run
                 '(begin
                    (define (len lst)
                      (if (empty? lst)
                          0
                          (+ 1 (len (cdr lst)))))
                    (len (cons 1 (cons 2 (cons 3 '()))))))
                3)
  (check-equal? (run
                 '(begin (define (f x1 x2 x3 x4 x5) (- (+ x1 x2) (+ x3 x4)))
                         (define (g x1 x2) (+ (+ x1 x2) (f 2 4 3 5 1)))
                         (define (h x1 x2) (make-string (+ (+ x1 x2) (g 2 3))
                                              (string-ref "qwerty" (g 1 2))))
                         (h 1 2)))
                 "wwwwww")
  (check-equal? (run
                 '(begin (define (f x1 x2 x3 x4 x5) (cons x1 (cons x2
                                                      (cons x3 (cons x4 '())))))
                         (define (g x1 x2) (cons x2 (+ x2 (car x1))))
                         (define (h x1 x2) (cons x2 (cons
                                               (+ x2 (car (g (f 1 2 3 4 5) x2)))
                                               (g (cons 6 7) 8))))
                         (let ((y (f 7 8 9 10 11)))
                           (cons (f 2 3 4 5 6) (cons (g y 2) (h y 2))))))
                '((2 3 4 5) (2 . 9) 2 4 8 . 14))                
  )

(define (test-runner-io run)
  ; Evildoer examples
  (check-equal? (run 7 "") (cons 7 ""))
  (check-equal? (run '(write-byte 97) "") (cons (void) "a"))
  (check-equal? (run '(read-byte) "a") (cons 97 ""))
  (check-equal? (run '(begin (write-byte 97) (read-byte)) "b")
                (cons 98 "a"))
  (check-equal? (run '(read-byte) "") (cons eof ""))
  (check-equal? (run '(eof-object? (read-byte)) "") (cons #t ""))
  (check-equal? (run '(eof-object? (read-byte)) "a") (cons #f ""))
  (check-equal? (run '(begin (write-byte 97) (write-byte 98)) "")
                (cons (void) "ab"))
  (check-equal? (run '(peek-byte) "ab") (cons 97 ""))
  (check-equal? (run '(begin (peek-byte) (read-byte)) "ab") (cons 97 ""))
  (check-equal? (run '(cons 1 (write-byte 97)) "") (cons (cons 1 (void)) "a"))
  (check-equal? (run '(cons (write-byte 97) 1) "") (cons (cons (void) 1) "a"))
  (check-equal? (run '(cons 1 (begin (write-byte 97) 2)) "") (cons (cons 1 2) "a"))
  (check-equal? (run '(cons 1 (cons 2 (begin (write-byte 97) 3))) "") (cons '(1 2 . 3) "a"))
  ;; Extort examples
  (check-equal? (run '(write-byte #t) "") (cons 'err ""))

  ; Fraud examples
  (check-equal? (run '(let ((x 97)) (write-byte x)) "") (cons (void) "a"))
  (check-equal? (run '(let ((x 97))
                        (begin (write-byte x)
                               x))
                     "")
                (cons 97 "a"))
  (check-equal? (run '(let ((x 97)) (begin (read-byte) x)) "b")
                (cons 97 ""))
  (check-equal? (run '(let ((x 97)) (begin (peek-byte) x)) "b")
                (cons 97 ""))

  ;; Hustle examples
  (check-equal? (run '(let ((x 1))
                        (begin (write-byte 97)
                               1))
                     "")
                (cons 1 "a"))

  (check-equal? (run '(let ((x 1))
                        (let ((y 2))
                          (begin (write-byte 97)
                                 1)))
                     "")
                (cons 1 "a"))

  (check-equal? (run '(let ((x (cons 1 2)))
                        (begin (write-byte 97)
                               (car x)))
                     "")
                (cons 1 "a"))

  (check-equal? (run '(cons 1 (begin (write-byte 97) 2)) "")
                (cons (cons 1 2) "a"))
  (check-equal? (run '(cons '() (cons (cons 1 (cons 2 (cons 3 '())))
                                      (cons (add1 5) (cons 1 '())))) "")
                (cons '(() (1 2 3) 6 1) ""))
  
  ;; Iniquity examples
  (check-equal? (run '(begin (define (print-alphabet i)
                               (if (zero? i)
                                   (void)
                                   (begin (write-byte (- 123 i))
                                          (print-alphabet (sub1 i)))))
                             (print-alphabet 26))
                     "")
                (cons (void) "abcdefghijklmnopqrstuvwxyz"))
  )