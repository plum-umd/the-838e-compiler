#lang racket
(provide test-runner)
(require rackunit)

(define (test-runner run)
  ;; Abscond examples
  (check-equal? (run #t) #t)
  (check-equal? (run -8) -8)

  ;; Blackmail examples
  (check-equal? (run '(add1 (add1 7))) 9)
  (check-equal? (run '(add1 (sub1 7))) 7)
  
  ;; Con examples
  (check-equal? (run '(if (zero? 0) 1 2)) 1)
  (check-equal? (run '(if (zero? 1) 1 2)) 2)
  (check-equal? (run '(if (zero? -7) 1 2)) 2)
  (check-equal? (run '(if (zero? 0)
                          (if (zero? 1) 1 2)
                          7))
                2)
  (check-equal? (run '(if (zero? (if (zero? 0) 1 0))
                          (if (zero? 1) 1 2)
                          7))
                7)

  ;; Dupe examples
  (check-equal? (run #t) #t)
  (check-equal? (run #f) #f)
  (check-equal? (run (if #t 1 2)) 1)
  (check-equal? (run (if #f 1 2)) 2)
  (check-equal? (run (if 0 1 2)) 1)
  (check-equal? (run '(if #t 3 4)) 3)
  (check-equal? (run '(if #f 3 4)) 4)
  (check-equal? (run '(if  0 3 4)) 3)
  (check-equal? (run '(zero? 4)) #f)
  (check-equal? (run '(zero? 0)) #t)
  (check-equal? (run '(integer? 4)) #t)
  (check-equal? (run '(integer? #t)) #f)
  ;; Dodger examples
  (check-equal? (run #\a) #\a)
  (check-equal? (run #\b) #\b)
  (check-equal? (run '(char? #\a)) #t)
  (check-equal? (run '(char? #t)) #f)
  (check-equal? (run '(char? 8)) #f)
  (check-equal? (run '(char->integer #\a)) (char->integer #\a))
  (check-equal? (run '(integer->char 955)) #\Î»)
  (check-equal? (run '(integer->char 0)) #\nul)
  (check-equal? (run '(integer->char 1)) #\u0001)                
  (check-equal? (run '(integer->char 1114111)) #\U0010FFFF)
  (check-equal? (run '(integer->char 55295)) #\uD7FF)
  (check-equal? (run '(integer->char 57344)) #\uE000)
  ;; Extort examples
  (check-equal? (run '(add1 #f)) 'err)
  (check-equal? (run '(sub1 #f)) 'err)
  (check-equal? (run '(zero? #f)) 'err)
  (check-equal? (run '(char->integer #f)) 'err)
  (check-equal? (run '(integer->char #f)) 'err)
  (check-equal? (run '(integer->char -1)) 'err)
  (check-equal? (run '(integer->char 1114112)) 'err)
  (check-equal? (run '(integer->char 55296)) 'err)
  (check-equal? (run '(integer->char 57343)) 'err)
;;  (check-equal? (run '(write-byte #f)) 'err)
;;  (check-equal? (run '(write-byte -1)) 'err)
;;  (check-equal? (run '(write-byte 256)) 'err)
  (check-equal? (run '(integer-length 229)) 8)
  (check-equal? (run '(integer-length -1657)) 11)
  (check-equal? (run '(integer-length #t)) 'err)
  ;; Fraud examples
  (check-equal? (run '(let ((x 7)) x)) 7)
  (check-equal? (run '(let ((x 7)) 2)) 2)
  (check-equal? (run '(let ((x 7)) (add1 x))) 8)
  (check-equal? (run '(let ((x (add1 7))) x)) 8)
  (check-equal? (run '(let ((x 7)) (let ((y 2)) x))) 7)
  (check-equal? (run '(let ((x 7)) (let ((x 2)) x))) 2)
  (check-equal? (run '(let ((x 7)) (let ((x (add1 x))) x))) 8)

  (check-equal? (run '(let ((x 0))
                        (if (zero? x) 7 8)))
                7)
  (check-equal? (run '(let ((x 1))
                        (add1 (if (zero? x) 7 8))))
                9)
  (check-equal? (run '(+ 3 4)) 7)
  (check-equal? (run '(- 3 4)) -1)
  (check-equal? (run '(+ (+ 2 1) 4)) 7)
  (check-equal? (run '(+ (+ 2 1) (+ 2 2))) 7)
  (check-equal? (run '(let ((x (+ 1 2)))
                        (let ((z (- 4 x)))
                          (+ (+ x x) z))))
                7)
  (check-equal? (run '(let ((x 5))
                        (let ((y 9))
                          (+ (+ (- (+ (+ x 4) (+ y 5)) 5) (+ x x)) (+ y y)))))
                46)
  (check-equal? (run '(let ((x (add1 #f))) 0)) 'err)

  ;; n-ary let
  (check-equal? (run '(let () 4)) 4)
  (check-equal? (run '(let ((x 4)) 3)) 3)
  (check-equal? (run '(let ((x 4)) x)) 4)
  (check-equal? (run '(let ((x 4) (y 6)) (+ x y))) 10)
  (check-equal? (run '(let ((x (let ((y 4)) y)) (y 6)) (+ x y))) 10)
  (check-equal? (run '(let ((y 6) (x (let ((y 4)) y))) (+ x y))) 10)
  (check-equal? (run '(let ((y (let ((y 4)) y)) (x (let ((z 4)) z)) (z 2)) (+ z (+ x y)))) 10)
  (check-equal? (run '(let ((x (add1 12)) (y 9)) (let ((x (add1 x)) (z y)) (+ z x)))) 23)

  ;; String examples 
  (check-equal? (run "Racket") "Racket")
  (check-equal? (run "Rack") "Rack")
  (check-equal? (run "Ra") "Ra")
  (check-equal? (run "R") "R")
  (check-equal? (run "") "")
  (check-equal? (run '(string-length "Rack")) 4)
  (check-equal? (run '(string-length "")) 0)
  (check-equal? (run '(string-ref "Racket" 0)) #\R)
  (check-equal? (run '(string-ref "Racket" 5)) #\t)
  (check-equal? (run '(string-ref "Racket" 3)) #\k)
  (check-equal? (run '(string-ref "Racket" 6)) 'err)
  (check-equal? (run '(string-ref "Racket" -1)) 'err)
  (check-equal? (run '(string? "Racket")) #t)
  (check-equal? (run '(string? "")) #t)
  (check-equal? (run '(string? 5)) #f)
  (check-equal? (run '(string? #\a)) #f)
  (check-equal? (run '(string? '())) #f)
  (check-equal? (run '(string? #t)) #f)
  (check-equal? (run '(make-string 5 #\y)) "yyyyy")
  (check-equal? (run '(make-string 3 #\y)) "yyy")
  (check-equal? (run '(make-string 1 #\y)) "y")
  (check-equal? (run '(make-string 0 #\y)) "")
  (check-equal? (run '(make-string -1 #\y)) 'err)
  
  ;; Iniquity tests
  (check-equal? (run
                 '(begin (define (f x) x)
                         (f 5)))
                5)
  (check-equal? (run
                 '(begin (define (tri x)
                           (if (zero? x)
                               0
                               (+ x (tri (sub1 x)))))
                         (tri 9)))
                45)
  (check-equal? (run
                 '(begin
                    (define (len lst)
                      (if (empty? lst)
                          0
                          (+ 1 (len (cdr lst)))))
                    (len (cons 1 (cons 2 (cons 3 '()))))))
                3)
  (check-equal? (run
                 '(begin (define (f x1 x2 x3 x4 x5) (- (+ x1 x2) (+ x3 x4)))
                         (define (g x1 x2) (+ (+ x1 x2) (f 2 4 3 5 1)))
                         (define (h x1 x2) (make-string (+ (+ x1 x2) (g 2 3))
                                              (string-ref "qwerty" (g 1 2))))
                         (h 1 2)))
                 "wwwwww")
  )