#lang racket
(begin (require jit/interp-heap jit/heap jit/env jit/unload jit/interp-prims-heap jit/program-ast) (current-input-port (open-input-string "1")) (unload (match (match (cons (quote ()) (read-byte)) ((quote err) (quote err)) (_ (interp-env-heap #s(Prim2 + #s(Int 1) #s(Int 2)) (quote ()) (quote ()) (quote ())))) ((quote err) (quote err)) (_ (interp-env-heap #s(Let lst #s(Prim2 cons #s(Char #\r) #s(Prim2 cons #s(Char #\b) #s(Prim2 cons #s(Char #\c) #s(Empty)))) #s(Let v #s(Prim1 box #s(Prim1 car #s(Var lst))) #s(Prim2 cons #s(Var v) #s(Prim1 cdr #s(Var lst))))) (quote ()) (quote ()) (quote ()))))))
